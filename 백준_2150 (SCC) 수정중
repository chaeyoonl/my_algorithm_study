
tmpStack = []
calStack = []
answerList = []

def stackData():
    tmp = tmpStack.pop()
    calStack.append(tmp)

def checkNumberInList(nested_list, number_to_find):
    for item in nested_list:
        if item == number_to_find:
            return False
    return True

def checkSCC(start, tmpList, listData):
    checkData = 0
    if checkNumberInList(tmpList, start):
        tmpList.append(start)

    if len(listData) != 0 and len(calStack) != 0:

        for i in listData:
            if i[0] == start:

                listData.remove(i)
                if any(sublist[0] == i[1] for sublist in listData):
                    checkData = 1
                    checkSCC(i[1], tmpList, listData)

        if checkData == 0:
            start = calStack.pop()
            answerList.append(tmpList)
            tmpList = []
            checkSCC(start, tmpList, listData)

def changeListData(listData):
    tmpList = []
    for i in listData:
        tmpList.append([i[1], i[0]])

    return tmpList

def DFS(start, listData, visited):
    global tmpStack, calStack
    visited[start] = True
    tmpStack.append(start)
    for i in listData:
        if i[0] == start and visited[i[1]] == False:
            DFS(i[1], listData, visited)

    stackData()


V, E = map(int, input().split())
listData = []
visited = [False]*(V+1)

for i in range(E):
    tmpList = []
    A, B = map(int, input().split())
    tmpList.append(A)
    tmpList.append(B)
    listData.append(tmpList)


DFS(1, listData, visited)
listData = changeListData(listData)
checkSCC(calStack.pop(), [], listData)

answerList = sorted(answerList, key= lambda x:sorted(x))
for i in range(len(answerList)):
    answerList[i] = sorted(answerList[i])


print(len(answerList))

for sublist in answerList:
    print(' '.join(str(item) for item in sublist) + " -1")
