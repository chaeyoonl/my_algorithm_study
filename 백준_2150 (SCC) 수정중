import sys
sys.setrecursionlimit(10 ** 6)

tmpStack = []
calStack = []
answerList = []

def stackData():
    tmp = tmpStack.pop()
    calStack.append(tmp)


def reverseDFS(start, tmpList, listData, visited):
    global calStack
    if visited[start] == True:
        return

    visited[start] = True
    tmpList.append(start)
    for i in listData:
        if i[0] == start and visited[i[1]] == False:
            reverseDFS(i[1], tmpList, listData, visited)


def DFS(start, listData, visited):
    global tmpStack, calStack
    if visited[start] == True:
        return
    visited[start] = True
    tmpStack.append(start)
    for i in listData:
        if i[0] == start and visited[i[1]] == False:
            DFS(i[1], listData, visited)
    stackData()

V, E = map(int, input().split())
listData = []
reversed_listData = []
visited = [False]*(V+1)

for i in range(E):
    tmpList = []
    A, B = map(int, input().split())
    tmpList.append(A)
    tmpList.append(B)
    listData.append(tmpList)

    tmpList = []
    tmpList.append(B)
    tmpList.append(A)
    reversed_listData.append(tmpList)

for i in range(1, V+1):
    if visited[i] == False:
        DFS(i, listData, visited)


visited = [False]*(V+1)

while calStack:
    sccList = []
    node = calStack.pop()
    reverseDFS(node, sccList, reversed_listData, visited)
    if len(sccList) != 0:
        answerList.append(sorted(sccList))

answerList = sorted(answerList, key= lambda x:sorted(x))

print(len(answerList))

for i in answerList:
    print(*i, -1)
